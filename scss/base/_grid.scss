@use 'sass:math';

/* Grid System */
/* Desktop First */

$grid-breakpoints-d: (
    no-refix: 0,
    xl: 1400px,
    lg: 1200px,
    md: 992px,
    sm: 768px,
    xs: 576px,
) !default;

$container-max-widths-d: (
    no-refix: 1320px,
    xl: 1140px,
    lg: 960px,
    md: 720px,
    sm: 540px,
    xs: 100%,
) !default;
$grid-columns-d: 12 !default;
$grid-row-cols-number-d: $grid-columns-d * 0.5 !default;
$grid-gutter-width-d: 24px !default;
$gutters-d: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.25,
    5: 1.5,
    6: 3,
) !default;
$display-value-d: flex, grid, block, inline-block, inline, none;
%gutter-padding {
    padding-left: calc(var(--grid-gutter-x) * 0.5);
    padding-right: calc(var(--grid-gutter-x) * 0.5);
}

.container-fluid {
    --grid-gutter-x: #{$grid-gutter-width-d};
    --grid-gutter-y: 0;

    width: 100%;
    margin-right: auto;
    margin-left: auto;
    @extend %gutter-padding;
}
.container {
    @extend .container-fluid;
}

.text-center {
    text-align: center;
}
.text-right {
    text-align: right;
}
.text-left {
    text-align: left;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(var(--grid-gutter-y) * -1);
    margin-left: calc(var(--grid-gutter-x) * 0.5 * -1);
    margin-right: calc(var(--grid-gutter-x) * 0.5 * -1);

    & > * {
        margin-top: calc(var(--grid-gutter-y));
        max-width: 100%;
        @extend %gutter-padding;
    }
}

.col {
    flex: 1 0;
}

@mixin makeMediaQuery-d($dimension) {
    @if $dimension == 0 {
        @content;
    } @else {
        @media (max-width: ($dimension - 0.02)) {
            @content;
        }
    }
}

@mixin makeRowCols-d($infix) {
    @for $i from 1 through $grid-row-cols-number-d {
        .row-cols#{$infix}-#{$i} > * {
            flex: 0 0 auto;
            width: math.div(100%, $i);
        }
    }
}

@mixin makeOffset-d($infix) {
    @for $i from 0 to $grid-columns-d {
        .offset#{$infix}-#{$i} {
            @if $i == 0 {
                margin-left: 0;
            } @else {
                margin-left: math.div(100%, $grid-columns-d) * $i;
            }
        }
    }
}

@mixin makeCols-d($infix) {
    @for $i from 1 through $grid-columns-d {
        .col#{$infix}-#{$i} {
            flex: 0 0 auto;
            width: math.div(100%, $grid-columns-d) * $i;
        }
    }
}

@mixin makeGutters-d($infix) {
    @each $i, $ratio in $gutters-d {
        .g#{$infix}-#{$i} {
            --grid-gutter-x: #{$grid-gutter-width-d * $ratio};
            --grid-gutter-y: #{$grid-gutter-width-d * $ratio};
        }

        .gx#{$infix}-#{$i} {
            --grid-gutter-x: #{$grid-gutter-width-d * $ratio};
        }

        .gy#{$infix}-#{$i} {
            --grid-gutter-y: #{$grid-gutter-width-d * $ratio};
        }
    }
}

@mixin makeDisplay-d($infix) {
    @each $display in $display-value-d {
        .d#{$infix}-#{$display} {
            display: $display !important;
        }
    }
}

//Text Alignment
$text-align: left, center, right, justify;
@mixin make-text-align($infix) {
    @each $align in $text-align {
        .text#{$infix}-#{$align} {
            text-align: $align !important;
        }
    }
}

// Justify-content
$justify-content: start, end, center, between, around, evenly;
@mixin make-justify-content($infix) {
    @each $justify in $justify-content {
        @if ($justify == 'start' or $justify == 'end') {
            .justify-content#{$infix}-#{$justify} {
                justify-content: flex-#{$justify} !important;
            }
        } @else if($justify == 'between' or $justify == 'around' or $justify == 'evenly') {
            .justify-content#{$infix}-#{$justify} {
                justify-content: space-#{$justify} !important;
            }
        } @else {
            .justify-content#{$infix}-#{$justify} {
                justify-content: $justify !important;
            }
        }
    }
}

//Align-items
$align-items: stretch, center, flex-start, flex-end, start, end, baseline;
@mixin make-align-items($infix) {
    @each $align in $align-items {
        .align-items#{$infix}-#{$align} {
            align-items: $align !important;
        }
    }
}

@each $breakpoint, $dimension in $grid-breakpoints-d {
    $maxWidth: map-get($container-max-widths-d, $breakpoint);
    $infix: if($breakpoint == 'no-refix', '', '-' + $breakpoint);

    @include makeMediaQuery-d($dimension) {
        .container {
            max-width: $maxWidth;
        }

        @include makeRowCols-d($infix);

        @include makeCols-d($infix);

        @include makeOffset-d($infix);

        @include makeGutters-d($infix);

        @include makeDisplay-d($infix);

        @include make-text-align($infix);

        @include make-justify-content($infix);

        @include make-align-items($infix);
    }
}

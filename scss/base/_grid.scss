@use 'sass:math';

/* Grid System */
$grid-breakpoints: (
    xs: 0,
    xxl: 1400px,
    xl: 1200px,
    lg: 992px,
    md: 768px,
    sm: 576px,
) !default;
$container-max-widths: (
    sm: 100%,
    md: 540px,
    lg: 720px,
    xl: 960px,
    xxl: 1140px,
) !default;
$gutters: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.25,
    5: 1.5,
    6: 3,
) !default;

$grid-columns: 12 !default;
$grid-row-cols-number: $grid-columns * 0.5 !default;
$grid-gutter-width: 24px !default;
%gutter-padding {
    padding-left: calc(var(--grid-gutter-x) * 0.5);
    padding-right: calc(var(--grid-gutter-x) * 0.5);
}

.container-fluid {
    --grid-gutter-x: #{$grid-gutter-width};
    --grid-gutter-y: 0;

    width: 100%;
    margin-right: auto;
    margin-left: auto;
    @extend %gutter-padding;
}
.container {
    @extend .container-fluid;
    width: 1340px;
}

.text-center {
    text-align: center;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(var(--grid-gutter-y) * -1);
    margin-left: calc(var(--grid-gutter-x) * 0.5 * -1);
    margin-right: calc(var(--grid-gutter-x) * 0.5 * -1);

    & > * {
        margin-top: calc(var(--grid-gutter-y));
        max-width: 100%;
        @extend %gutter-padding;
    }
}

.col {
    flex: 1 0;
}

@mixin makeMediaQuery($dimension) {
    @if $dimension == 0 {
        @content;
    } @else {
        @media (max-width: ($dimension - 0.02)) {
            @content;
        }
    }
}

@mixin makeRowCols($infix: null) {
    @for $i from 1 through $grid-row-cols-number {
        .row-cols#{$infix}-#{$i} > * {
            flex: 0 0 auto;
            width: math.div(100%, $i);
        }
    }
}

@mixin makeOffset($infix: null) {
    @for $i from 0 to $grid-columns {
        .offset#{$infix}-#{$i} {
            @if $i == 0 {
                margin-left: 0;
            } @else {
                margin-left: math.div(100%, $grid-columns) * $i;
            }
        }
    }
}

@mixin makeCols($infix: null) {
    @for $i from 1 through $grid-columns {
        .col#{$infix}-#{$i} {
            flex: 0 0 auto;
            width: math.div(100%, $grid-columns) * $i;
        }
    }
}

@mixin makeGutters($infix: null) {
    @each $i, $ratio in $gutters {
        .g#{$infix}-#{$i} {
            --grid-gutter-x: #{$grid-gutter-width * $ratio};
            --grid-gutter-y: #{$grid-gutter-width * $ratio};
        }

        .gx#{$infix}-#{$i} {
            --grid-gutter-x: #{$grid-gutter-width * $ratio};
        }

        .gy#{$infix}-#{$i} {
            --grid-gutter-y: #{$grid-gutter-width * $ratio};
        }
    }
}

@each $breakpoint, $dimension in $grid-breakpoints {
    $maxWidth: map-get($container-max-widths, $breakpoint);
    $infix: if($breakpoint == 'xs', '', '-' + $breakpoint);

    @include makeMediaQuery($dimension) {
        .container {
            @if ($breakpoint == 'xs' or $breakpoint == 'sm') {
                max-width: 100%;
            } @else {
                max-width: $maxWidth + $grid-gutter-width;
            }
        }

        @include makeRowCols($infix);

        @include makeCols($infix);

        @include makeOffset($infix);

        @include makeGutters($infix);
    }
}
